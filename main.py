# Import necessary libraries
import copy
import asyncio
import requests
from fastapi import FastAPI, Request, Response
from llama_cpp import Llama
from fastapi.responses import HTMLResponse  # Add this import
from sse_starlette import EventSourceResponse

# Load the language model from Llama
print("Loading model...")
llm = Llama(model_path="C:\\Users\\devin\\OneDrive\\Documents\\Shadow_Moses\\alpaca_llm\\models\\ggml-alpaca-7b-q4.bin")
print("Model loaded!")

# Create a FastAPI app instance
app = FastAPI()

# Route for serving the HTML page at the root path "/"
@app.get("/", response_class=HTMLResponse)
async def read_index():
    # Open the "index.html" file and return its content as a response
    with open("index.html") as f:
        return f.read()

# Route for Server-Sent Events (SSE) requests at "/stream"
# Route for SSE requests
@app.get("/stream")
async def llama(question: str, request: Request):
    stream = llm(
        f"Question: {question} Answer: ",
        max_tokens=100,
        stop=["\n", " Q:"],
        stream=True,
    )

    # Define an asynchronous generator to iterate over the language model stream
    async def async_generator():
        for item in stream:
            yield item

    # Define an asynchronous function to handle server-sent events
    async def server_sent_events():
        # Iterate over the items generated by the async generator
        async for item in async_generator():
            # Check if the client has disconnected, and if so, break the loop
            if await request.is_disconnected():
                break

            # Create a deep copy of the current item from the language model stream
            result = copy.deepcopy(item)
            # Extract the generated text from the language model's response
            text = result["choices"][0]["text"]

            # Yield the generated text as a dictionary in the format required for SSE
            yield {"data": text}

    # Set the content type to "text/event-stream" and return an SSE response with the generator
    response = EventSourceResponse(server_sent_events(), media_type="text/event-stream")
    return response
